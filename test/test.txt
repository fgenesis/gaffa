-- hello world

--var x = strlen("abc") + 1

--{
--    int z := g(2)(3)
--    var a:float, b:int, c = obj:method(g(z))
--    z = 0
--}
--int y = obj:[s+"_thing"]()
--y = 1
--var i = i

--var z = m:mth(f())
--var z = m:mth(f(0)) -- dafuq
--
--int a, _ = +1, 1<<z
--int a = 1<<z
--
--var s = "hi"
--var x:int = 0xacab
--
--int a = -b
--
--(1 + 2 * 3) / (4 + 1)
--
--int x = 1+2*3+4
--
--int y, z = 1,2
--
--table t = {}
--table t = {key=1}
--table t = {1}
--table t = {1,key=2,[1+1]=3,}
--
--urange r = (0..!5+1)
--uarray a = [1,2,3]
--
--int a = b + c + d
--
--if(true)
--{
--}
--else if(x)
--{
--}
--else
--{
--}
--
--for(var i = 0..) {}
--
--var i := 0
--
--i = 5
--
--table t = {[a]=2}
--t.x = 5
--t[0] = 6
--a,b = 1,2
--
--func hello()
--{
--	int i = 0;
--	return i+5;
--}
--
--type intpair = { a = int, b = int }

--bool b = self.x == 0


--type Point = { x = float , y = float, z = 0.0 }

-- methods and namespaced functions go into the current symbol table,
-- NOT the type:
-- normal functions go in: syms[funcname]
-- methods go in:          syms[type][funcname]
-- this way they can be exported from a module, or stay local, without polluting
-- the global namespace like it would be in Lua.
-- rule: The symbol left of : or :: must be a type.
-- plus: when we see obj.xx = func() ... then we know it's a "function pointer"

-- declare method on type. goes into current namespace.
--func Point:len()
--    return math.sqrt(self.x*self.x + self.y*self.y + self.z*self.z)

-- declare "method". also goes into current namespace

--func Point:isZero() { return self.x == 0.0 }

int x = -1
--int x, y = 0, 1
--var y: f() = 0

--a = var x = 0 -- FIXME

--export var s := +0x42 * 5

--int C = 0x1ff
--var unused = 0
--string S = "hello"
--string T = "world"

--int M := 0
--func add(int a, int b) -> int
--	return a + b + C + M
--M = 1

--func nothing() {}

--func identity(int a)
--    return a
