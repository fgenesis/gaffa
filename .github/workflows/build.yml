name: Build
on:
  push:

jobs:
  build:
    strategy:
      matrix:
        compiler: [gcc, clang]
        cmake: ['2.6', '3.20']
        os: ['ubuntu-latest', 'windows-latest']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Build with ${{ matrix.compiler }} and CMake ${{ matrix.cmake }} on ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ matrix.cmake }}

      - name: Install dependencies under unix
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt update -y && sudo apt install -y build-essential

      - name: Install dependencies under windows
        if: startsWith(matrix.os, 'windows')
        run: choco install make

      - name: Verify cmake version
        run: cmake --version

      - name: Build with ${{ matrix.compiler }} under unix
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir build
          cd build

          if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc
            export CXX=g++
          else
            export CC=clang
            export CXX=clang++
          fi

          cmake .. -DCMAKE_BUILD_TYPE=Release

          # verify in CMakeCache.txt that the compiler is set to the correct one
          if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            gcc --version
          else
            clang --version
          fi

          make -j $(nproc)

      - name: Build with ${{ matrix.compiler }} under windows
        if: startsWith(matrix.os, 'windows')
        run: |
          mkdir build
          cd build
          
          # Set the compiler environment variables based on the matrix.compiler value
          if ($env:matrix_compiler -eq "gcc") {
            $env:CC = "gcc"
            $env:CXX = "g++"
          } else {
            $env:CC = "clang"
            $env:CXX = "clang++"
          }

          # Run CMake with the Release build type. Also set the generator to makefiles
          cmake .. -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles"
            
          # Verify the compiler version
          if ($env:matrix_compiler -eq "gcc") {
            gcc --version
          } else {
            clang --version
          }
  
          # Build the project using all available processors
          make -j $env:NUMBER_OF_PROCESSORS